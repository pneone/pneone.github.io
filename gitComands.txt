git clone <url репозиторію> - завантаження репозиторію на пк
	ls – це команда, яка перераховує всі файли та папки у вашому поточному каталозі
  
	cd <ім'я репозиторію>, щоб перейти до цієї папки
  
	touch <нове ім'я файлу>, щоб створити новий файл у цій папці
  
	git add <нове ім'я файлу>, щоб відстежувати цей конкретний файл, або git add . для відстеження всіх файлів у цьому каталозі.
  
	git commit -m "якесь повідомлення", де повідомлення описує внесені вами зміни
  
	git commit -am "якесь повідомлення" - ця команда зафіксує всі внесені вами зміни.
  
	git status, щоб побачити, як наш код порівнюється з кодом у віддаленому сховищі
  
	git push, щоб опублікувати наші локальні коміти в ҐітХаб
  
	git pull, щоб витягнути будь-які віддалені зміни до вашого локального репозиторію
  
	git log, надає вам історію всіх ваших комітів у цьому репозиторії
  
	git reset --hard <commit> повертає ваш код точно таким, яким він був після вказаного коміту. Щоб вказати коміт, використовуйте хеш коміту, пов'язаний із комітом,       який можна знайти за допомогою журналу git log, як показано вище.
  
	git reset --hard origin/master повертає ваш код до версії, що на цей момент зберігається в інтернеті на ҐітХаб.
  
	git branch, щоб побачити, над якою гілкою ви зараз працюєте, вона буде позначена зірочкою зліва від її назви
  
	git checkout -b <нове ім’я гілки>, щоб створити нову гілку
  
	git checkout <назва гілки>, щоб перемикайтеся між гілками 
  
	git merge <інша назва гілки> - об'єднання двох гілок 

==================================================================================================================================================================

Команды в Git Bash консоли
clear — Очистить консоль

Навигация
pwd — Показать текущий каталог
ls - Показать файлы в данной папке, кроме скрытых
ls -f — Показать файлы в данной папке, включая и скрытые
cd c:/ — Перейти в конкретный каталог
cd - — Вернуться назад
cd .. — Выйти на 1 уровень вверх
cd ../.. — Выйти на 2 уровня вверх

Создание каталогов
mkdir — Создать папку
cd !$ — Перейти в только что созданную папку
mkdir -p {app1,app2} — Создать сразу несколько папок
mkdir -p app/{css,js} — Создать сразу несколько вложенных папок

Создание файлов
touch index.html — Создать файл index.html
touch app/{css/main.css,js/main.js,index.html} — Создать сразу несколько файлов, никаких лишних пробелов быть не должно

Удаление файлов
touch — позволяет создавать файлы
rm test — Удалить пустую папку test
rm -r test — Удалить папку test с файлами внутри неё

Перемещение файлов
mv app1/*.* app2 — Переместить все файлы из папки app1 в папку app2
